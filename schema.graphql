# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  isAdmin: Boolean
}

type Experience {
  id: ID!
  title: String
  job: String
  content: Experience_content_Document
  startDate: String
  endDate: String
  technos(where: TechnoWhereInput! = {}, orderBy: [TechnoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnoWhereUniqueInput): [Techno!]
  technosCount(where: TechnoWhereInput! = {}): Int
  image: ImageFieldOutput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

type Experience_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  title: StringFilter
  job: StringFilter
  startDate: StringFilter
  endDate: StringFilter
  technos: TechnoManyRelationFilter
  blurhash: StringFilter
  image_40: StringFilter
  image_150: StringFilter
  image_300: StringFilter
  image_600: StringFilter
}

input TechnoManyRelationFilter {
  every: TechnoWhereInput
  some: TechnoWhereInput
  none: TechnoWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  job: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  blurhash: OrderDirection
  image_40: OrderDirection
  image_150: OrderDirection
  image_300: OrderDirection
  image_600: OrderDirection
}

input ExperienceUpdateInput {
  title: String
  job: String
  content: JSON
  startDate: String
  endDate: String
  technos: TechnoRelateToManyForUpdateInput
  image: ImageFieldInput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

input TechnoRelateToManyForUpdateInput {
  disconnect: [TechnoWhereUniqueInput!]
  set: [TechnoWhereUniqueInput!]
  create: [TechnoCreateInput!]
  connect: [TechnoWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  title: String
  job: String
  content: JSON
  startDate: String
  endDate: String
  technos: TechnoRelateToManyForCreateInput
  image: ImageFieldInput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

input TechnoRelateToManyForCreateInput {
  create: [TechnoCreateInput!]
  connect: [TechnoWhereUniqueInput!]
}

type Techno {
  id: ID!
  name: String
  content: Techno_content_Document
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  image: ImageFieldOutput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

type Techno_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TechnoWhereUniqueInput {
  id: ID
}

input TechnoWhereInput {
  AND: [TechnoWhereInput!]
  OR: [TechnoWhereInput!]
  NOT: [TechnoWhereInput!]
  id: IDFilter
  name: StringFilter
  experiences: ExperienceManyRelationFilter
  blurhash: StringFilter
  image_40: StringFilter
  image_150: StringFilter
  image_300: StringFilter
  image_600: StringFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input TechnoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  blurhash: OrderDirection
  image_40: OrderDirection
  image_150: OrderDirection
  image_300: OrderDirection
  image_600: OrderDirection
}

input TechnoUpdateInput {
  name: String
  content: JSON
  experiences: ExperienceRelateToManyForUpdateInput
  image: ImageFieldInput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input TechnoUpdateArgs {
  where: TechnoWhereUniqueInput!
  data: TechnoUpdateInput!
}

input TechnoCreateInput {
  name: String
  content: JSON
  experiences: ExperienceRelateToManyForCreateInput
  image: ImageFieldInput
  blurhash: String
  image_40: String
  image_150: String
  image_300: String
  image_600: String
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(where: ExperienceWhereUniqueInput!, data: ExperienceUpdateInput!): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createTechno(data: TechnoCreateInput!): Techno
  createTechnos(data: [TechnoCreateInput!]!): [Techno]
  updateTechno(where: TechnoWhereUniqueInput!, data: TechnoUpdateInput!): Techno
  updateTechnos(data: [TechnoUpdateArgs!]!): [Techno]
  deleteTechno(where: TechnoWhereUniqueInput!): Techno
  deleteTechnos(where: [TechnoWhereUniqueInput!]!): [Techno]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  technos(where: TechnoWhereInput! = {}, orderBy: [TechnoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnoWhereUniqueInput): [Techno!]
  techno(where: TechnoWhereUniqueInput!): Techno
  technosCount(where: TechnoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
